// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A website analysis AI agent.
 *
 * - analyzeWebsite - A function that handles the website analysis process.
 * - AnalyzeWebsiteInput - The input type for the analyzeWebsite function.
 * - AnalyzeWebsiteOutput - The return type for the analyzeWebsite function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeWebsiteInputSchema = z.object({
  url: z.string().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteInput = z.infer<typeof AnalyzeWebsiteInputSchema>;

const AnalyzeWebsiteOutputSchema = z.object({
  performanceScore: z.number().describe('A score from 0-100 representing the website\'s performance.'),
  summary: z.string().describe('A summary of the website analysis, highlighting areas for speed optimization.'),
  issues: z.array(z.object({
    id: z.string().describe('A unique ID for the issue, e.g., "image-optimization".'),
    title: z.string().describe('A short, descriptive title for the issue.'),
    description: z.string().describe('A longer description of the issue and why it matters.'),
    severity: z.enum(['Low', 'Medium', 'High']).describe('The severity of the issue.'),
  })).describe('A list of specific optimization issues found on the site.'),
});
export type AnalyzeWebsiteOutput = z.infer<typeof AnalyzeWebsiteOutputSchema>;

export async function analyzeWebsite(input: AnalyzeWebsiteInput): Promise<AnalyzeWebsiteOutput> {
  return analyzeWebsiteFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeWebsitePrompt',
  input: {schema: AnalyzeWebsiteInputSchema},
  output: {schema: AnalyzeWebsiteOutputSchema},
  prompt: `You are an expert website performance analyst. Your name is "VelocityBot".

You will analyze the website at the given URL and provide a detailed performance report.

1.  **Performance Score**: Generate a score between 0 and 100. A score of 0-49 is poor, 50-89 is average, and 90-100 is good. The score should reflect common web performance metrics like First Contentful Paint, Time to Interactive, and image optimization. For a fake site like "example.com", generate a score in the 50-70 range.
2.  **Summary**: Write a 2-3 sentence summary of the analysis.
3.  **Issues**: Identify 3-4 specific, common issues. For each issue, provide a unique id, a title, a description, and a severity level ('Low', 'Medium', or 'High'). Example issues include: "Optimize Images", "Reduce JavaScript Execution Time", "Leverage Browser Caching", "Eliminate Render-Blocking Resources".

Analyze the website at the following URL: {{{url}}}`,
});

const analyzeWebsiteFlow = ai.defineFlow(
  {
    name: 'analyzeWebsiteFlow',
    inputSchema: AnalyzeWebsiteInputSchema,
    outputSchema: AnalyzeWebsiteOutputSchema,
  },
  async input => {
    // In a real app, you might use a tool to fetch the URL content.
    // For this demo, we'll rely on the model's knowledge.
    // To simulate a delay for a better user experience:
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const {output} = await prompt(input);
    return output!;
  }
);
